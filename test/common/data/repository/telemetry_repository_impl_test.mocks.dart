// Mocks generated by Mockito 5.4.4 from annotations
// in infotainment_mobile_app/test/common/data/repository/telemetry_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:infotainment_mobile_app/common/data/datasource/api/telemetry_data_client.dart'
    as _i3;
import 'package:infotainment_mobile_app/features/basic_car_controls/presentation/widget/blinker_controls.dart'
    as _i6;
import 'package:infotainment_mobile_app/features/basic_car_controls/presentation/widget/throttle_controls.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:web_socket_channel/web_socket_channel.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWebSocketChannel_0 extends _i1.SmartFake
    implements _i2.WebSocketChannel {
  _FakeWebSocketChannel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TelemetryDataClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockTelemetryDataClient extends _i1.Mock
    implements _i3.TelemetryDataClient {
  MockTelemetryDataClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get address => (super.noSuchMethod(
        Invocation.getter(#address),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#address),
        ),
      ) as String);

  @override
  _i2.WebSocketChannel get telemetryChannel => (super.noSuchMethod(
        Invocation.getter(#telemetryChannel),
        returnValue: _FakeWebSocketChannel_0(
          this,
          Invocation.getter(#telemetryChannel),
        ),
      ) as _i2.WebSocketChannel);

  @override
  set telemetryChannel(_i2.WebSocketChannel? _telemetryChannel) =>
      super.noSuchMethod(
        Invocation.setter(
          #telemetryChannel,
          _telemetryChannel,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.WebSocketChannel get commandChannel => (super.noSuchMethod(
        Invocation.getter(#commandChannel),
        returnValue: _FakeWebSocketChannel_0(
          this,
          Invocation.getter(#commandChannel),
        ),
      ) as _i2.WebSocketChannel);

  @override
  set commandChannel(_i2.WebSocketChannel? _commandChannel) =>
      super.noSuchMethod(
        Invocation.setter(
          #commandChannel,
          _commandChannel,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Stream<dynamic> listen() => (super.noSuchMethod(
        Invocation.method(
          #listen,
          [],
        ),
        returnValue: _i5.Stream<dynamic>.empty(),
      ) as _i5.Stream<dynamic>);

  @override
  _i5.Stream<dynamic> listenCommandChannel() => (super.noSuchMethod(
        Invocation.method(
          #listenCommandChannel,
          [],
        ),
        returnValue: _i5.Stream<dynamic>.empty(),
      ) as _i5.Stream<dynamic>);

  @override
  void openCommandSocket() => super.noSuchMethod(
        Invocation.method(
          #openCommandSocket,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sendCommand({
    _i6.BlinkerEnum? blinkerEnum,
    _i7.VelocityEnum? velocityEnum,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #sendCommand,
          [],
          {
            #blinkerEnum: blinkerEnum,
            #velocityEnum: velocityEnum,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void disconnect() => super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
